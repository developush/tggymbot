from telegram import (
    constants,
    InlineKeyboardMarkup,
)

from logic.base import DefaultMessageHandler
from constants import SubscriptionValue


class InfoMenuController(DefaultMessageHandler):
    async def _call(self):
        if not self._update.message:
            await self.callback_query.answer()

        text, buttons = self._get_data()
        if (self.callback_query and
                not self.callback_query.message.document and
                not self.callback_query.message.video):
            try:
                await self.callback_query.edit_message_text(
                    text=text,
                    reply_markup=buttons,
                )
            except:
                await self._context.bot.sendMessage(
                    chat_id=self.chat_id,
                    text=text,
                    reply_markup=buttons,
                    disable_notification=self.silent
                )
            if not self._update.message:
                self._context.drop_callback_data(self.callback_query)
        else:
            try:
                await self.callback_query.delete_message()
            finally:
                await self._context.bot.sendMessage(
                    chat_id=self.chat_id,
                    text=text,
                    reply_markup=buttons,
                    disable_notification=self.silent
                )

    def _get_data(self):
        texts = {
            'en': '‚ÑπÔ∏è Info:',
            'ru': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:',
            'ua': '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:',
        }

        buttons = [{
            'text': {
                'en': 'Manual',
                'ru': '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                'ua': '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è',
            },
            'callback_data': 'manual'
        }, {
            'text': {
                'en': 'Feedback',
                'ru': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                'ua': "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫",
            },
            'callback_data': 'feedback'
        }, {
            'text': {
                'en': 'Terms of use',
                'ru': '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
                'ua': "–£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
            },
            'callback_data': 'oferta'
        }, {
            'text': {
                'en': 'Help',
                'ru': '–ü–æ–º–æ—â—å',
                'ua': "–î–æ–ø–æ–º–æ–≥–∞",
            },
            'callback_data': 'help'
        }]

        buttons = [{'name': button['text'][self.lang],
                    'callback_data': button['callback_data']} for button in buttons]
        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        buttons.extend(self.attach_back_button('menu'))
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        return 'info' == callback_data


class InfoManualController(DefaultMessageHandler):
    async def _call(self):
        if not self._update.message:
            await self.callback_query.answer()

        text, buttons, media = self._get_data()
        try:
            await self.callback_query.delete_message()
        finally:
            await self._context.bot.sendVideo(
                chat_id=self.chat_id,
                video=media,
                width=886,
                height=1920,
                caption=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
            if not self._update.message:
                self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': '‚ÑπÔ∏è Info | Manual:\n'
                  'A short video of how to use me correctly.\n'
                  'If you have any questions, all contact information in the "Feedback" section',
            'ru': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n'
                  '–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π.\n'
                  '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"',
            'ua': '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è | –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n'
                  '–ö–æ—Ä–æ—Ç–∫–µ –≤—ñ–¥–µ–æ –ø—Ä–æ —Ç–µ, —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –º–Ω–æ—é.\n'
                  '–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è, –≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É —Ä–æ–∑–¥—ñ–ª—ñ "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫"',
        }

        with open(self._static_path + 'static/info/manual.MOV', 'rb') as f:
            media = f.read()

        buttons = self.attach_back_button('info')
        return texts[self.lang], InlineKeyboardMarkup(buttons), media

    @staticmethod
    def pattern(callback_data):
        return 'manual' == callback_data


class FeedbackController(DefaultMessageHandler):
    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': '‚ÑπÔ∏è Info | Feedback:\n'
                  'Feel free to ask any connected with bot question‚ùìor offer your ideasüí°\n'
                  'ü¶æMain developer: @prosto_vania\n'
                  'üëëThe main: @fitness_feel\n'
                  'üì®Email: gymbuddybot@gmail.com\n',
            'ru': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n'
                  '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùì, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º, –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏üí°\n'
                  'ü¶æ–ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @prosto_vania\n'
                  'üëë–°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π: @fitness_feel\n'
                  'üì®–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: gymbuddybot@gmail.com\n',
            'ua': "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è | –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫:\n"
                  "–ù–µ —Å–æ—Ä–æ–º—Å—è –∑–∞–¥–∞–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è‚ùì(–æ–¥—Ä–∞–∑—É —Å–∫–∞–∂—É, —è –Ω–µ –∑–Ω–∞—é —è–∫ –≤–∏–Ω–∏—â–∏—Ç–∏ —É—Å—é —Ä—É—Å–Ω—é ... –ø–æ–∫–∏—â–æ), "
                  "–∞–±–æ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞—à—ñ —ñ–¥–µ—óüí°\n"
                  "ü¶æ–†–æ–∑—Ä–æ–±–Ω–∏–∫: @prosto_vania\n"
                  'üëë–ì–µ—Ç–º–∞–Ω: @prosto_vania\n'
                  "üì®–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞: gymbuddybot@gmail.com\n",
        }

        buttons = self.attach_back_button('info')
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        return 'feedback' == callback_data


class OfertaController(DefaultMessageHandler):
    async def _call(self):
        await self.callback_query.answer()

        text, media, buttons = self._get_data()
        try:
            await self.callback_query.delete_message()
        finally:
            await self._context.bot.sendDocument(
                chat_id=self.chat_id,
                document=media,
                filename='terms_of_use.pdf',
                caption=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
            if not self._update.message:
                self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': '‚ÑπÔ∏è Info | Terms of use:\n\n'
                  'Individual entrepreneur "–ö–ê–õ–Ü–®–£–ö –Ü.–û."\n\n'
                  'Contacts:\n'
                  'Email: kalishukivan@gmail.com\n'
                  'Telephone: +380991611727\n\n'
                  'If you have any questions connected with bot functionality, '
                  'all developer contact information in the "Feedback" section',
            'ru': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n'
                  '–§–õ–ü "–ö–ê–õ–Ü–®–£–ö –Ü.–û."\n\n'
                  '–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                  'Email: kalishukivan@gmail.com\n'
                  '–¢–µ–ª–µ—Ñ–æ–Ω: +380991611727\n\n'
                  '–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –±–æ—Ç–∞, '
                  '–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"',
            'ua': "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è | –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n\n"
                  '–§–û–ü "–ö–ê–õ–Ü–®–£–ö –Ü.–û."\n\n'
                  'Contacts:\n'
                  'Email: kalishukivan@gmail.com\n'
                  '–¢–µ–ª–µ—Ñ–æ–Ω: +380991611727\n\n'
                  '–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤\'—è–∑–∞–Ω—ã –∑ –±–æ—Ç–æ–º, '
                  '–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É —Ä–æ–∑–¥—ñ–ª—ñ "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫"',
        }

        with open(self._static_path + 'static/info/oferta.pdf', 'rb') as f:
            media = f.read()

        buttons = self.attach_back_button('info')
        return texts[self.lang], media, InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        return 'oferta' == callback_data


class HelpController(DefaultMessageHandler):
    async def _call(self):
        if not self._update.message:
            await self.callback_query.answer()

        text, buttons = self._get_data()

        if not self._update.message:
            try:
                await self.callback_query.edit_message_text(
                    text=text,
                    reply_markup=buttons,
                )
            except:
                await self._context.bot.sendMessage(
                    chat_id=self.chat_id,
                    text=text,
                    reply_markup=buttons,
                    disable_notification=self.silent
                )
            self._context.drop_callback_data(self.callback_query)
        else:
            try:
                await self.callback_query.delete_message()
            finally:
                await self._context.bot.sendMessage(
                    chat_id=self.chat_id,
                    text=text,
                    reply_markup=buttons,
                    disable_notification=self.silent
                )

    def _get_data(self):
        texts = {
            'en': '‚ÑπÔ∏è Info | Help:\n'
                  'GymBro for every gym loverüí™\n'
                  'üß† Functionality: \n'
                  ' ‚Ä¢ Records of workouts\n'
                  ' ‚Ä¢ Calculator kcal.\n'
                  ' ‚Ä¢ Videos and descriptions of exercises\n'
                  ' ‚Ä¢ Progress analytics\n'
                  ' ‚Ä¢ Access to training programs\n\n'
                  'All you need for gym in one place!',
            'ru': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –ü–æ–º–æ—â—å:\n'
                  'GymBro –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª—é–±–∏—Ç–µ–ª—è —Å–ø–æ—Ä—Ç–∑–∞–ª–∞üí™\n'
                  'üß†–§—É–Ω–∫—Ü–∏–∏:\n'
                  ' ‚Ä¢ –£—á—ë—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n'
                  ' ‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∫–∞–ª.\n'
                  ' ‚Ä¢ –í–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n'
                  ' ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n'
                  ' ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n'
                  '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!',
            'ua': "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è | –î–æ–ø–æ–º–æ–≥–∞:\n"
                  'GymBro –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ª—é–±–∏—Ç–µ–ª—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª—Éüí™\n'
                  'üß† –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n'
                  ' ‚Ä¢ –û–±–ª—ñ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n'
                  ' ‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∫–∞–ª.\n'
                  ' ‚Ä¢ –í—ñ–¥–µ–æ —Ç–∞ –æ–ø–∏—Å–∏ –≤–ø—Ä–∞–≤\n'
                  ' ‚Ä¢ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—É\n'
                  ' ‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–≥—Ä–∞–º —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n\n'
                  '–í—Å–µ, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª—É –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ!',
        }

        buttons = self.attach_back_button('info')
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        return 'help' == callback_data


class GuideController(DefaultMessageHandler):
    check_subscription = True
    needed_subscription_value = SubscriptionValue.Medium

    async def _call(self):
        await self.callback_query.answer()

        text, buttons, file = self._get_data()

        try:
            await self.callback_query.delete_message()
        finally:
            await self.bot.sendDocument(
                chat_id=self.chat_id,
                document=file,
                filename='boss_of_the_gym.pdf',
                caption=text,
                disable_notification=self.silent,
                parse_mode=constants.ParseMode.HTML
            )

            menu_text = {
                'en': 'Menu:',
                'ru': '–ú–µ–Ω—é:',
                'ua': '–ú–µ–Ω—é:'
            }
            menu_buttons = self.build_menu(self._menu_buttons[self.lang])
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=menu_text[self.lang],
                reply_markup=menu_buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': 'üß† Guide\n\n'
                  ' ‚Ä¢ The guide includes the main structured information about nutrition and training to build the shape of your dreams!\n'
                  ' ‚Ä¢ Watch the <a href="https://youtu.be/kSYXXmJ0BfE">lecture</a> in parallel with the guide.\n'
                  '<b><u>IT IS NECESSARY.</u></b>\n'
                  ' ‚Ä¢ The lecture explains in detail each point, aspect of the guide and contains detailed answers to the main questions\n'
                  ' ‚Ä¢ This format was specially chosen for better assimilation of the material.\n'
                  'Enjoy watching‚úåÔ∏è',
            'ru': 'üß† –ì–∞–π–¥ + –ª–µ–∫—Ü–∏—è\n\n'
                  ' ‚Ä¢ –ì–∞–π–¥ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ç–≤–æ–µ–π –º–µ—á—Ç—ã!\n'
                  ' ‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ <a href="https://youtu.be/kSYXXmJ0BfE">–ª–µ–∫—Ü–∏—é</a> –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –≥–∞–π–¥–æ–º.\n'
                  '<b><u>–≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û.</u></b>\n'
                  ' ‚Ä¢ –õ–µ–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ –æ–±—å—è—Å–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç, –∞—Å–ø–µ–∫—Ç –≥–∞–π–¥–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n'
                  ' ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç, –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.\n'
                  '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞‚úåÔ∏è',
            'ua': 'üß† –ì–∞–π–¥ + –ª–µ–∫—Ü—ñ—è\n\n'
                  " ‚Ä¢ –ì–∞–π–¥ –≤–∫–ª—é—á–∞—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ñ–æ—Ä–º–∏ —Ç–≤–æ—î—ó –º—Ä—ñ—ó!\n"
                  ' ‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ <a href="https://youtu.be/kSYXXmJ0BfE">–ª–µ–∫—Ü—ñ—é</a> –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ —ñ–∑ –≥–∞–π–¥–æ–º.\n'
                  "<b><u>–¶–ï –û–ë–û–í'–Ø–ó–ö–û–í–û.</u></b>\n"
                  ' ‚Ä¢ –õ–µ–∫—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ—è—Å–Ω—é—î –∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç, –∞—Å–ø–µ–∫—Ç –≥–∞–π–¥—É —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è\n'
                  ' ‚Ä¢ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –≤–∏–±—Ä–∞–Ω–æ —Ç–∞–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∑–∞—Å–≤–æ—î–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É.\n'
                  "–ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É‚úåÔ∏è",
        }

        with open(self._static_path + 'static/guide.pdf', 'rb') as f:
            file = f.read()

        buttons = self.attach_back_button('menu')
        return texts[self.lang], InlineKeyboardMarkup(buttons), file

    @staticmethod
    def pattern(callback_data):
        return 'guide' == callback_data
