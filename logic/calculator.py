import re
from telegram import (
    constants,
    InlineKeyboardMarkup
)

from constants import Genders, ActivityLevelCoefficients
from logic.base import DefaultMessageHandler


class CalculatorGenderController(DefaultMessageHandler):
    check_subscription = True

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': 'üßÆ Calculator\nChoose your gender:',
            'ru': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:',
            'ua': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:',
        }

        buttons = [{
            'text': {
                'en': 'Man',
                'ru': '–ú—É–∂—á–∏–Ω–∞',
                'ua': '–ß–æ–ª–æ–≤—ñ–∫',
            },
            'callback_data': {'calculator': True,
                              'gender': Genders.Man}
        }, {
            'text': {
                'en': 'Woman',
                'ru': '–ñ–µ–Ω—â–∏–Ω–∞',
                'ua': "–ñ—ñ–Ω–∫–∞",
            },
            'callback_data': {'calculator': True,
                              'gender': Genders.Man}
        }]

        buttons = [{'name': button['text'][self.lang],
                    'callback_data': button['callback_data']} for button in buttons]
        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        buttons.extend(self.attach_back_button('menu'))
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        return 'calculator' == callback_data


class CalculatorLevelController(DefaultMessageHandler):
    check_subscription = True

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
                parse_mode=constants.ParseMode.HTML
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent,
                parse_mode=constants.ParseMode.HTML
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        callback_data = self.callback_query.data
        datas = []
        for i in ActivityLevelCoefficients:
            tmp = callback_data.copy()
            tmp['activity_level'] = i
            datas.append(tmp)
        texts = {
            'en': 'üßÆ Calculator\n'
                  'Choose your activity level:\n\n'
                  '<b>Seal</b>\n\t\tMoist, little or no training\n\n'
                  '<b>Common</b>\n\t\tIntermittent activity, light training 1-3 times per week\n\n'
                  '<b>Moderate</b>\n\t\tModerate activity, moderate physical work or regular exercise 3-5 days a week\n\n'
                  '<b>Stick in the ass</b>\n\t\tActive person, full-time physical work or intense training 6-7 times a week\n\n'
                  '<b>Gigachad</b>\n\t\tthe most active person, lives in the gym and sleeps in sets of 5 to 10 reps',
            'ru': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n'
                  '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n'
                  '<b>–¢—é–ª–µ–Ω—å—á–∏–∫</b>\n\t\t–ú–æ–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–∞–ª–æ –∏–ª–∏ –≤–æ–æ–±—â–µ –æ—Ç—Å—Ç—É—Å–≤—É—é—Ç\n\n'
                  '<b>–†—è–¥–æ–≤–æ–π</b>\n\t\t–ü–µ—Ä–∏–æ–¥–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–æ—Å—Ç—å, –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n\n'
                  '<b>–°—Ä–µ–¥–Ω–µ—á—ë–∫</b>\n\t\t–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é\n\n'
                  '<b>–®–∏–ª–æ –≤ –∑–∞–¥–Ω–∏—Ü–µ</b>\n\t\t–ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n\n'
                  '<b>–ì–∏–≥–∞—á–∞–¥</b>\n\t\t–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∂–∏–≤—ë—Ç –≤ –∑–∞–ª–µ –∏ —Å–ø–∏—Ç –ø–æ–¥—Ö–æ–¥–∞–º–∏ 5 –ø–æ 10',
            'ua': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n'
                  '–û–±–µ—Ä–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:\n\n'
                  '<b>–†—É—Å–Ω—è–≤–∏–π –ø–æ–ª–æ–Ω–µ–Ω–∏–π</b>\n\t\t–ú–æ–ª–æ—Ä—É—Ö–ª–∏–≤–∏–π, —î–¥–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Äî —Å–¥–∞—á–∞ –≤ –ø–æ–ª–æ–Ω –ó–°–£\n\n'
                  '<b>–ê—Ä–µ—Å—Ç–æ–≤–∏—á</b>\n\t\t–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –ª–µ–≥–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 2-3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n\n'
                  '<b>–°–µ—Ä–µ–¥–Ω—è—á–æ–∫</b>\n\t\t–î–ª—è –ø–æ–º—ñ—Ä–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª—é–¥–µ–π: —Ñ—ñ–∑–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç—è–∂–∫–æ—Å—Ç—ñ –∞–±–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 3-5 –¥–Ω—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n\n'
                  '<b>–®–∏–ª–æ –≤ –¥—É–ø—ñ</b>\n\t\t–ê–∫—Ç–∏–≤–Ω–∞ –ª—é–¥–∏–Ω–∞, —Ñ—ñ–∑–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞ –ø–æ–≤–Ω–∏–π –¥–µ–Ω—å –∞–±–æ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 6-7 —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n\n'
                  '<b>–ì—ñ–≥–∞—á–∞–¥</b>\n\t\t–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∞ –ª—é–¥–∏–Ω–∞, –∂–∏–≤–µ –≤ –∑–∞–ª—ñ —ñ —Å–ø–∏—Ç—å –ø—ñ–¥—Ö–æ–¥–∞–º–∏ 5 –ø–æ 10',
        }

        buttons = [{
            'text': {
                'en': 'Seal',
                'ru': '–¢—é–ª–µ–Ω—å—á–∏–∫',
                'ua': '–†—É—Å–Ω—è–≤–∏–π –ø–æ–ª–æ–Ω–µ–Ω–∏–π',
            },
            'callback_data': datas[0]
        }, {
            'text': {
                'en': 'Common',
                'ru': '–†—è–¥–æ–≤–æ–π',
                'ua': '–ê—Ä–µ—Å—Ç–æ–≤–∏—á',
            },
            'callback_data': datas[1]
        }, {
            'text': {
                'en': 'Moderate',
                'ru': '–°—Ä–µ–¥–Ω–µ—á—ë–∫',
                'ua': '–°–µ—Ä–µ–¥–Ω—è—á–æ–∫',
            },
            'callback_data': datas[2]
        }, {
            'text': {
                'en': 'Stick in the ass',
                'ru': '–®–∏–ª–æ –≤ –∑–∞–¥–Ω–∏—Ü–µ',
                'ua': '–®–∏–ª–æ –≤ –¥—É–ø—ñ',
            },
            'callback_data': datas[3]
        }, {
            'text': {
                'en': 'Gigachad',
                'ru': '–ì–∏–≥–∞—á–∞–¥',
                'ua': '–ì—ñ–≥–∞—á–∞–¥',
            },
            'callback_data': datas[4]
        }
        ]

        buttons = [{'name': button['text'][self.lang],
                    'callback_data': button['callback_data']} for button in buttons]
        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        buttons.extend(self.attach_back_button('calculator'))
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        if type(callback_data) == dict:
            return (callback_data.get('calculator') and
                    callback_data.get('gender') and
                    not callback_data.get('activity_level'))
        return False


class CalculatorParamsController(DefaultMessageHandler):
    check_subscription = True

    async def _call(self):
        await self.callback_query.answer()
        self._save_calculator_data()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        callback_data = self.callback_query.data

        texts = {
            'en': 'üßÆ Calculator\n'
                  'Enter your Age | Height | Weight:\n'
                  '‚ùóÔ∏èInput format: 20 185 75 ‚ùóÔ∏è',
            'ru': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n'
                  '–í–≤–µ–¥–∏ —Å–≤–æ–π –í–æ–∑—Ä–∞—Å—Ç | –†–æ—Å—Ç | –í–µ—Å:\n'
                  '‚ùóÔ∏è–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 20 185 75 ‚ùóÔ∏è',
            'ua': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n'
                  '–í–≤–µ–¥–∏ —Å–≤—ñ–π –í—ñ–∫ | –ó—Ä—ñ—Å—Ç | –í–∞–≥—É:\n'
                  '‚ùó–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è: 20 185 75 ‚ùó',
        }
        callback_data.pop('activity_level')
        buttons = self.attach_back_button(callback_data)
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    def _save_calculator_data(self):
        self.user.extra_data['calculator'] = self.callback_query.data
        self.user.save()

    @staticmethod
    def pattern(callback_data):
        if type(callback_data) == dict:
            return (callback_data.get('calculator') and
                    callback_data.get('gender') and
                    callback_data.get('activity_level'))
        return False


class CalculatorResultController(DefaultMessageHandler):
    check_subscription = True

    async def _call(self):
        text, buttons = self._get_data()
        menu_text = {
            'en': 'Menu:',
            'ru': '–ú–µ–Ω—é:',
            'ua': '–ú–µ–Ω—é:',
        }
        try:
            await self.bot.edit_message_text(
                text=text,
                chat_id=self.chat_id,
                reply_markup=buttons,
                parse_mode=constants.ParseMode.HTML
            )
        except:
            await self.bot.sendMessage(
                text=text,
                chat_id=self.chat_id,
                parse_mode=constants.ParseMode.HTML
            )
        await self.bot.sendMessage(
            text=menu_text[self.lang],
            chat_id=self.chat_id,
            reply_markup=buttons,
        )

    def _get_data(self):
        text = self._update.message.text
        data = re.findall(r'\d+(?:[.,]\d+)?', text)
        base, average, eating_cals, else_cals, deficit, surplus, imt = self._calculate(data)
        result_emoji = {
            'good': 'üü¢',
            'medium': 'üü†',
            'bad': 'üî¥',
        }
        result = 'medium'
        if 18.5 <= imt <= 25:
            result = 'good'
        elif 15 >= imt or imt >= 30:
            result = 'bad'

        result = result_emoji[result]

        texts = {
            'en': 'üßÆ Calculator\n'
                  f'<b>Rating</b> ‚Äî {result}\n\n'
                  f'<b>BMI</b> ‚Äî {imt}\n'
                  f'<b>RATE OF CALORIES</b> ‚Äî {average} kcal.\n'
                  '<b>Consumption of kcal.:</b>\n'
                  f'  ‚Ä¢ <b>{eating_cals}</b> ‚Äî Digestion of food\n'
                  f'  ‚Ä¢ <b>{else_cals}</b> ‚Äî Physical activity\n'
                  f'  ‚Ä¢ <b>{base}</b> ‚Äî Basic metabolism (organ function, respiration, etc.)\n\n'
                  '*BMI - Body Mass Index, the norm is from 18.5 to 25\n\n'
                  '<b>Kcal. deficiency for weight loss:</b>\n<pre>'
                  '\t%\t|\tKcal\t|\tWeight loss rate\n' +
                  '\n'.join([f'\t{i["percent"]}\t|\t{i["cals"]}\t|\t{i["weight"]} –∫g/month' for i in deficit]) +
                  '</pre>'
                  '\n\n<b>Kcal. surplus for weight gain:</b>\n<pre>'
                  '\t%\t|\tKcal\t|\tWeight gain rate\n' +
                  '\n'.join([f'\t{i["percent"]}\t|\t{i["cals"]}\t|\t{i["weight"]} –∫g/month' for i in surplus]) +
                  '</pre>'
                  '\n\n<b>WARNING</b>\n'
                  'All weight gain and loss calculations are approximate.\n'
                  'For qualified advice, please ask in our <a href="https://t.me/+la91hUWvcas5N2Yy">Chat</a>',
            'ru': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n'
                  f'<b>–û—Ü–µ–Ω–∫–∞</b> ‚Äî {result}\n\n'
                  f'<b>–ò–ú–¢</b> ‚Äî {imt}\n'
                  f'<b>–ù–û–†–ú–ê –ö–ê–õ–û–†–ò–ô</b> ‚Äî {average} –∫–∫–∞–ª.\n'
                  '<b>–¢—Ä–∞—Ç–∞ –∫–∫–∞–ª.</b>:\n'
                  f'  ‚Ä¢ <b>{eating_cals}</b> ‚Äî –£—Å–≤–æ–µ–Ω–∏–µ –ø–∏—â–∏\n'
                  f'  ‚Ä¢ <b>{else_cals}</b> ‚Äî –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n'
                  f'  ‚Ä¢ <b>{base}</b> ‚Äî –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º (—Ä–∞–±–æ—Ç–∞ –æ—Ä–≥–∞–Ω–æ–≤, –¥—ã—Ö–∞–Ω–∏–µ –∏ —Ç.–¥.)\n\n'
                  '*–ò–ú–¢ ‚Äî –ò–Ω–¥–µ–∫—Å –ú–∞—Å—Å—ã –¢–µ–ª–∞, –Ω–æ—Ä–º–∞ –æ—Ç 18.5 –¥–æ 25\n\n'
                  '<b>–î–µ—Ñ–∏—Ü–∏—Ç –∫–∫–∞–ª. –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è:</b>\n'
                  '<pre>\t%\t\t|\t–ö–∫–∞–ª\t|\tC–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ö—É–¥–µ–Ω–∏—è\n' +
                  '\n'.join([f'\t{i["percent"]}\t|\t{i["cals"]}\t|\t{i["weight"]} –∫–≥/–º–µ—Å—è—Ü' for i in deficit]) +
                  '</pre>'
                  '\n\n<b>–î–æ–±–∞–≤–æ—á–Ω—ã–µ –∫–∫–∞–ª. –¥–ª—è –Ω–∞–±–æ—Ä–∞:</b>\n'
                  '<pre>\t%\t\t|\t–ö–∫–∞–ª\t|\tC–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞\n' +
                  '\n'.join([f'\t{i["percent"]}\t|\t{i["cals"]}\t|\t{i["weight"]} –∫–≥/–º–µ—Å—è—Ü' for i in surplus]) +
                  '</pre>'
                  '\n\n<b>–í–ê–ñ–ù–û</b>\n'
                  '–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –ø–æ –Ω–∞–±–æ—Ä—É –∏ –ø–æ—Ç–µ—Ä–µ –º–∞—Å—Å—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ.\n'
                  '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à <a href="https://t.me/+la91hUWvcas5N2Yy">–ß–∞—Ç</a>',
            'ua': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n'
                  f'<b>–û—Ü—ñ–Ω–∫–∞</b> ‚Äî {result}\n\n'
                  f'<b>–Ü–ú–¢</b> ‚Äî {imt}\n'
                  f'<b>–ù–û–†–ú–ê –ö–ê–õ–û–†–Ü–ô</b> ‚Äî {average} –∫–∫–∞–ª.\n'
                  '<b>–¢—Ä–∞—Ç–∞ –∫–∫–∞–ª.:</b>\n'
                  f'  ‚Ä¢ <b>{eating_cals}</b> ‚Äî –ó–∞—Å–≤–æ—î–Ω–Ω—è —ó–∂—ñ\n'
                  f'  ‚Ä¢ <b>{else_cals}</b> ‚Äî –§—ñ–∑–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n'
                  f'  ‚Ä¢ <b>{base}</b> ‚Äî –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–∞–±–æ–ª—ñ–∑–º (—Ä–æ–±–æ—Ç–∞ –æ—Ä–≥–∞–Ω—ñ–≤, –¥–∏—Ö–∞–Ω–Ω—è —ñ —Ç.–¥.)\n\n'
                  '*–Ü–ú–¢ - –Ü–Ω–¥–µ–∫—Å –ú–∞—Å–∏ –¢—ñ–ª–∞, –Ω–æ—Ä–º–∞ –≤—ñ–¥ 18.5 –¥–æ 25\n\n'
                  '<b>–î–µ—Ñ—ñ—Ü–∏—Ç –∫–∫–∞–ª. –¥–ª—è —Å—Ö—É–¥–Ω–µ–Ω–Ω—è:</b>\n<pre>'
                  '\t%\t|\t–ö–∫–∞–ª\t|\t–®–≤–∏–¥–∫—ñ—Å—Ç—å —Å—Ö—É–¥–Ω–µ–Ω–Ω—è\n' +
                  '\n'.join([f'\t{i["percent"]}\t|\t{i["cals"]}\t|\t{i["weight"]} –∫–≥/–º—ñ—Å—è—Ü—å' for i in deficit]) +
                  '</pre>'
                  '\n\n<b>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–∫–∞–ª. –¥–ª—è –Ω–∞–±–æ—Ä—É:</b>\n<pre>'
                  '\t%\t|\t–ö–∫–∞–ª\t|\t–®–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–±–æ—Ä—É\n' +
                  '\n'.join([f'\t{i["percent"]}\t|\t{i["cals"]}\t|\t{i["weight"]} –∫–≥/–º—ñ—Å—è—Ü—å' for i in surplus]) +
                  '</pre>'
                  '\n\n<b>–í–ê–ñ–õ–ò–í–û</b>\n'
                  '–í—Å—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∑ –Ω–∞–±–æ—Ä—É —Ç–∞ –≤—Ç—Ä–∞—Ç–∏ –º–∞—Å–∏ –∑—Ä–∞–∑–∫–æ–≤—ñ.\n'
                  '–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Å—è —É –Ω–∞—à <a href="https://t.me/+la91hUWvcas5N2Yy">–ß–∞—Ç</a>',
        }

        buttons = self.build_menu(self._menu_buttons[self.lang])
        return texts[self.lang], buttons

    def _calculate(self, data):
        saved_data = self.user.extra_data.pop('calculator')
        gender = saved_data['gender']
        activity_level = float(saved_data['activity_level'])
        age, height, weight = [float(i.replace(',', '.')) for i in data]

        imt = round(weight / (height / 100) ** 2, 1)
        base = round(10 * weight + 6.25 * height - 5 * age, 1)
        if gender == Genders.Man:
            base += 5
        else:
            base -= 161
        average = base * activity_level
        eating_cals = round(average * 0.1, 1)
        else_cals = round(average - base - eating_cals, 1)
        deficit = []
        for i in [5, 10, 15, 20]:
            percent = i / 100
            if i == 5:
                i = '5\t'
            deficit.append(dict(
                percent=i,
                cals=round(average * (1 - percent)),
                weight=round(average * percent / 250, 1)
            ))
        surplus = []
        for i in [5, 10, 15, 20]:
            percent = i / 100
            if i == 5:
                i = '5\t'
            surplus.append(dict(
                percent=i,
                cals=round(average * (1 + percent)),
                weight=round(average * percent / 250, 1)
            ))
        return base, average, eating_cals, else_cals, deficit, surplus, imt

    @classmethod
    def pattern(cls):
        return r'^\d+(?:[.,]\d+)?\s*?\d+(?:[.,]\d+)?\s\d+(?:[.,]\d+)?$'
