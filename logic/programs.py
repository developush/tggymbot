from peewee import fn
from telegram import (
    constants as tg_constants,
    InlineKeyboardMarkup
)
from datetime import datetime, timedelta

from constants import SubscriptionValue
from models import (
    ProgramGroup,
    ProgramLevel,
    Program,
    Exercise
)
from logic.base import DefaultMessageHandler


class ProgramGroupController(DefaultMessageHandler):
    check_subscription = True
    needed_subscription_value = SubscriptionValue.Medium

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': '‚úçÔ∏è Training Programs\nChoose suitable frequency:',
            'ru': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —á–∞—Å—Ç–æ—Ç—É:',
            'ua': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —á–∞—Å—Ç–æ—Ç—É:',
        }

        buttons = [{'name': p.name[self.lang],
                    'callback_data': {'programs': True,
                                      'program_group': p.id}} for p in (ProgramGroup
                                                                        .select()
                                                                        .order_by(ProgramGroup.order,
                                                                                  ProgramGroup.id))]
        program = self.user.program
        if program:
            my_trainings = {
                'en': 'My program',
                'ru': '–ú–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
                'ua': '–ú–æ—è –ø—Ä–æ–≥—Ä–∞–º–∞',
            }
            buttons.append({
                'name': my_trainings[self.lang],
                'callback_data': {'programs': True,
                                  'program_group': program.group.id,
                                  'program_level': program.level.id}
            })
        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        buttons.extend(self.attach_back_button('menu'))
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        return 'programs' == callback_data


class ProgramLevelController(DefaultMessageHandler):
    check_subscription = True
    needed_subscription_value = SubscriptionValue.Medium

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        texts = {
            'en': '‚úçÔ∏è Training Programs\nChoose a suitable option:',
            'ru': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:',
            'ua': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:',
        }
        callback_data = self.callback_query.data
        group_id = callback_data['program_group']
        buttons = [{'name': p.name[self.lang],
                    'callback_data': {'programs': True,
                                      'program_group': group_id,
                                      'program_level': p.id}} for p in (ProgramLevel
                                                                        .select(fn.DISTINCT(ProgramLevel.id),
                                                                                ProgramLevel.name,
                                                                                ProgramLevel.order)
                                                                        .join(Program)
                                                                        .join(ProgramGroup)
                                                                        .where(ProgramGroup.id == group_id)
                                                                        .order_by(ProgramLevel.order,
                                                                                  ProgramLevel.id)
                                                                        )]
        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        buttons.extend(self.attach_back_button('programs'))
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        if type(callback_data) == dict:
            return (callback_data.get('programs') and
                    callback_data.get('program_group') is not None and
                    callback_data.get('program_level') is None)
        return False


class ProgramController(DefaultMessageHandler):
    check_subscription = True
    needed_subscription_value = SubscriptionValue.Medium

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        callback_data = self.callback_query.data
        program = Program.get(
            group_id=callback_data['program_group'],
            level_id=callback_data['program_level'],
        )
        name = program.group.name[self.lang]
        level = program.level.name[self.lang]
        texts = {
            'en': '‚úçÔ∏è Training Programs\n\n'
                  '{name} | {level}\n\n'
                  "‚ö†Ô∏èYou don't need to cram all training days into a calendar week from Mon to Sun!"
                  '1 microcycle of training can take 8 or even 9 days.'
                  '‚ö†Ô∏èFocus only on the days of rest between classes and on your well-being!',
            'ru': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n'
                  '{name} | {level}\n\n'
                  '‚ö†Ô∏è–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–ø–∏—Ö–∏–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é –Ω–µ–¥–µ–ª—é —Å –ü–ù –ø–æ –í–°!\n'
                  '1 –º–∏–∫—Ä–æ—Ü–∏–∫–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å 8 –∏ –¥–∞–∂–µ 9 –¥–Ω–µ–π.\n'
                  '‚ö†Ô∏è–û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏ –∏ –Ω–∞ —Å–≤–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ!\n',
            'ua': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n\n'
                  '{name} | {level}\n\n'
                  '‚ö†Ô∏è –í–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–ø–∏—Ö–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–Ω—ñ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑ –ü–ù –ø–æ –ù–î!'
                  '1 –º—ñ–∫—Ä–æ—Ü–∏–∫–ª —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ 8 —ñ –Ω–∞–≤—ñ—Ç—å 9 –¥–Ω—ñ–≤.'
                  '‚ö†Ô∏è–û—Ä—ñ—î–Ω—Ç—É–π—Ç–µ—Å—è –ª–∏—à–µ –Ω–∞ –¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É –º—ñ–∂ –∑–∞–Ω—è—Ç—Ç—è–º–∏ —Ç–∞ –Ω–∞ —Å–≤–æ—î —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è!',
        }
        text = texts[self.lang].format(name=name,
                                       level=level)
        if self.user.program == program:
            buttons = [
                {
                    'text': {
                        'en': 'üí™ Next day',
                        'ru': 'üí™ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å',
                        'ua': 'üí™ –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å',
                    },
                    'callback_data': {'new_day': True,
                                      'program': program.id}
                },
                {
                    'text': {
                        'en': 'üö´ Stop program',
                        'ru': 'üö´ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É',
                        'ua': 'üö´ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É',
                    },
                    'callback_data': {'stop_program': True,
                                      'program': program.id}
                }
            ]
        else:
            buttons = [
                {
                    'text': {
                        'en': 'üí™ Start program',
                        'ru': 'üí™ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É',
                        'ua': 'üí™ –ü–æ—á–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É',
                    },
                    'callback_data': {'new_day': True,
                                      'program': program.id}
                }
            ]
        buttons = [{'name': b['text'][self.lang],
                    'callback_data': b['callback_data']} for b in buttons]

        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        callback_data.pop('program_level')
        buttons.extend(self.attach_back_button(callback_data))
        return text, InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        if type(callback_data) == dict:
            return (callback_data.get('programs') and
                    callback_data.get('program_group') is not None and
                    callback_data.get('program_level') is not None)
        return False


class StopProgramController(DefaultMessageHandler):
    check_subscription = True
    needed_subscription_value = SubscriptionValue.Medium

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
                parse_mode=tg_constants.ParseMode.HTML
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent,
                parse_mode=tg_constants.ParseMode.HTML
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        callback_data = self.callback_query.data
        program = Program.get_by_id(callback_data['program'])
        name = program.group.name[self.lang]
        texts = {
            'en': f'‚úçÔ∏è Training Programs\n\n{name}\n\n'
                  'You have completed the training program üí™\n'
                  'Looking forward to starting a new one!\n'
                  'If you do not know which program to choose next, consult in our <a href="https://t.me/+la91hUWvcas5N2Yy">Chat</a>',
            'ru': f'‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n{name}\n\n'
                  '–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™\n'
                  '–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—à—å –Ω–æ–≤—É—é!\n'
                  '–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–π, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è –≤ –Ω–∞—à–µ–º <a href="https://t.me/+la91hUWvcas5N2Yy">–ß–∞—Ç–µ</a>',
            'ua': f'‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n\n{name}\n\n'
                  f'–¢–∏ –∑–∞–∫—ñ–Ω—á–∏–≤ –ø—Ä–æ–≥—Ä–∞–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å üí™\n'
                  '–ó –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—é, –∫–æ–ª–∏ –ø–æ—á–Ω–µ—à –Ω–æ–≤—É!\n'
                  '–Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à —è–∫—É –ø—Ä–æ–≥—Ä–∞–º—É –≤–∏–±—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ—é, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Å—è —É –Ω–∞—à–æ–º—É <a href="https://t.me/+la91hUWvcas5N2Yy">–ß–∞—Ç—ñ</a>',
        }
        self.user.program = None
        if self.user.extra_data.get('days_in_row') is not None:
            self.user.extra_data.pop('days_in_row')
        self.user.extra_data['next_program_trainings'] = None
        self.user.save()

        buttons = [
            {
                'text': {
                    'en': '‚úçÔ∏è Trainings',
                    'ru': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã',
                    'ua': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏',
                },
                'callback_data': 'programs'
            },
            {
                'text': {
                    'en': 'Menu',
                    'ru': '–ú–µ–Ω—é',
                    'ua': '–ú–µ–Ω—é',
                },
                'callback_data': 'menu'
            }
        ]

        buttons = [{'name': b['text'][self.lang],
                    'callback_data': b['callback_data']} for b in buttons]

        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        return texts[self.lang], InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        if type(callback_data) == dict:
            return (callback_data.get('stop_program') and
                    callback_data.get('program') is not None)
        return False


class NextDayProgramController(DefaultMessageHandler):
    check_subscription = True
    needed_subscription_value = SubscriptionValue.Medium

    async def _call(self):
        await self.callback_query.answer()

        text, buttons = self._get_data()
        try:
            await self.callback_query.edit_message_text(
                text=text,
                reply_markup=buttons,
                parse_mode=tg_constants.ParseMode.HTML,
            )
        except:
            await self._context.bot.sendMessage(
                chat_id=self.chat_id,
                text=text,
                reply_markup=buttons,
                disable_notification=self.silent,
                parse_mode=tg_constants.ParseMode.HTML
            )
        self._context.drop_callback_data(self.callback_query)

    def _get_data(self):
        callback_data = self.callback_query.data
        program = Program.get_by_id(callback_data['program'])
        description = program.description[self.lang]
        texts = {
            'en': f"‚úçÔ∏è Training Programs\n\n{description}\n\nToday's exercises:\n",
            'ru': f'‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n{description}\n\n–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n',
            'ua': f'‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n\n{description}\n\n–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –≤–ø—Ä–∞–≤–∏:\n',
        }

        text = texts[self.lang]
        if self.user.program is not None and self.user.program != program:
            name = program.group.name[self.lang]
            level = program.level.name[self.lang]

            texts = {
                'en': '‚úçÔ∏è Training Programs\n\n'
                      'You already have an active training program:\n\n'
                      f'{name} | {level}\n\n'
                      'If you want to start a new one, you must first finish the old one.',
                'ru': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n'
                      '–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n'
                      f'{name} | {level}\n\n'
                      '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å—Ç–∞—Ä—É—é.',
                'ua': '‚úçÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n\n'
                      '–£ —Ç–µ–±–µ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:\n\n'
                      f'{name} | {level}\n\n'
                      '–Ø–∫—â–æ —Ö–æ—á–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —Å—Ç–∞—Ä—É.',
            }
            button_text = {
                'en': 'üö´ Stop program',
                'ru': 'üö´ –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É',
                'ua': 'üö´ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É',
            }
            buttons = [
                {'name': button_text[self.lang],
                 'callback_data': {'stop_program': True,
                                   'program': program.id}
                 }
            ]
            buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
            buttons.extend(self.attach_back_button('menu'))
            return texts[self.lang], InlineKeyboardMarkup(buttons)

        self.user.program = program
        self.user.save()

        days_before_next = 0
        if self.user.extra_data.get('last_program_day'):
            last_day = datetime.strptime(self.user.extra_data['last_program_day'], '%Y-%m-%d')
            now = datetime.now().strftime('%Y-%m-%d')
            now = datetime.strptime(now, '%Y-%m-%d')
            days_before_next = last_day + timedelta(days=program.group.days_between_trainings) - now
            days_before_next = days_before_next.days

        self.user.extra_data['last_program_day'] = datetime.now().strftime('%Y-%m-%d')
        if self.user.extra_data.get('days_in_row') is not None:
            self.user.extra_data['days_in_row'] += 1
        else:
            self.user.extra_data['days_in_row'] = 0

        days_in_row = self.user.extra_data['days_in_row']
        exercises = program.exercises[days_in_row % len(program.exercises)]

        self.user.extra_data['next_program_trainings'] = list(reversed(exercises))
        self.user.save()

        exs = list(Exercise.select().where(Exercise.id.in_(exercises)))
        ex_dict = {e: i for i, e in enumerate(exercises)}
        exs = sorted(exs, key=lambda x: ex_dict[x.id])
        for e in exs:
            tool = e.tool
            group = e.group
            text += f'\t ‚Ä¢ {group.get_name(self.lang)} | ' \
                    f'{tool.get_name(self.lang)} | ' \
                    f'{e.get_name(self.lang)}\n'

        text += '\n'

        if days_before_next > 0:
            next_training_date = datetime.now() + timedelta(days=days_before_next)
            next_training_date = next_training_date.strftime('%Y-%m-%d')
            texts = {
                'en': '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n'
                      'Today I advise you to <b><u>REST!</u></b>\n'
                      f'It is better not to do the next workout according to the program before <b>{next_training_date}</b>\n\n'
                      '<b><u>INCREASING THE FREQUENCY OF TRAINING CAN CAUSE MUSCLE LOSS</u></b>\n\n'
                      'If you want to practice more often without harming your progress, choose a <b>other</b> program\n'
                      '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n',
                'ru': '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n'
                      '–°–µ–≥–æ–¥–Ω—è —Å–æ–≤–µ—Ç—É—é <b><u>–û–¢–î–û–•–ù–£–¢–¨!</u></b>\n'
                      f'–°–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª—É—á—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–∞–Ω—å—à–µ <b>{next_training_date}</b>\n\n'
                      '<b><u>–£–í–ï–õ–ò–ß–ï–ù–ò–ï –ß–ê–°–¢–û–¢–´ –¢–†–ï–ù–ò–†–û–í–û–ö –ú–û–ñ–ï–¢ –ü–†–ò–í–ï–°–¢–ò –ö –ü–û–¢–ï–†–ï –ú–´–®–¶</u></b>\n\n'
                      '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —á–∞—â–µ –±–µ–∑ –≤—Ä–µ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å—É, –≤—ã–±–µ—Ä–∏ <b>–¥—Ä—É–≥—É—é</b> –ø—Ä–æ–≥—Ä–∞–º–º—É\n'
                      '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n',
                'ua': '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n'
                      '–°—å–æ–≥–æ–¥–Ω—ñ —Ä–∞–¥–∂—É <b><u>–í–Ü–î–ü–û–ß–ò–¢–ò!</u></b>\n'
                      f'–ù–∞—Å—Ç—É–ø–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–æ—é –∫—Ä–∞—â–µ –Ω–µ —Ä–æ–±–∏—Ç–∏ —Ä–∞–Ω—ñ—à–µ <b>{next_training_date}</b>\n\n'
                      "<b><u>–ó–ë–§–õ–¨–®–ï–ù–ù–Ø –ß–ê–°–¢–û–¢–ò –¢–†–ï–ù–£–í–ê–ù–¨ –ú–û–ñ–ï –ü–†–ò–í–ï–°–¢–ò –î–û –í–¢–†–ê–¢–ò –ú'–Ø–ó–Ü–í</u></b>\n\n"
                      '–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–∞–π–º–∞—Ç–∏—Å—è —á–∞—Å—Ç—ñ—à–µ –±–µ–∑ —à–∫–æ–¥–∏ –ø—Ä–æ–≥—Ä–µ—Å—É, –≤–∏–±–µ—Ä—ñ—Ç—å <b>—ñ–Ω—à—É</b> –ø—Ä–æ–≥—Ä–∞–º—É\n'
                      '‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n',
            }
            text += texts[self.lang]

        exercise = Exercise.get_by_id(exercises[0])
        button_texts = {
            'en': 'Start training üí™',
            'ru': '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üí™',
            'ua': '–ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üí™'
        }
        buttons = [{'name': button_texts[self.lang],
                    'callback_data': {
                        "group": exercise.group.id,
                        "tool": exercise.tool.id,
                        "exercise": exercise.unique_id}
                    }]

        buttons = self.build_menu(buttons, raw=True, buttons_in_row=1)
        buttons.extend(self.attach_back_button('menu'))
        return text, InlineKeyboardMarkup(buttons)

    @staticmethod
    def pattern(callback_data):
        if type(callback_data) == dict:
            return (callback_data.get('new_day') and
                    callback_data.get('program') is not None)
        return False
